/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'

const AuthIndexLazyRouteImport = createFileRoute('/_auth/')()
const AuthPassportsIndexLazyRouteImport = createFileRoute('/_auth/passports/')()
const AuthAccessIndexLazyRouteImport = createFileRoute('/_auth/access/')()

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexLazyRoute = AuthIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/index.lazy').then((d) => d.Route))
const AuthPassportsIndexLazyRoute = AuthPassportsIndexLazyRouteImport.update({
  id: '/passports/',
  path: '/passports/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/passports/index.lazy').then((d) => d.Route),
)
const AuthAccessIndexLazyRoute = AuthAccessIndexLazyRouteImport.update({
  id: '/access/',
  path: '/access/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/access/index.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof AuthIndexLazyRoute
  '/access': typeof AuthAccessIndexLazyRoute
  '/passports': typeof AuthPassportsIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof AuthIndexLazyRoute
  '/access': typeof AuthAccessIndexLazyRoute
  '/passports': typeof AuthPassportsIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/': typeof AuthIndexLazyRoute
  '/_auth/access/': typeof AuthAccessIndexLazyRoute
  '/_auth/passports/': typeof AuthPassportsIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/access' | '/passports'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/access' | '/passports'
  id: '__root__' | '/_auth' | '/_auth/' | '/_auth/access/' | '/_auth/passports/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/passports/': {
      id: '/_auth/passports/'
      path: '/passports'
      fullPath: '/passports'
      preLoaderRoute: typeof AuthPassportsIndexLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/access/': {
      id: '/_auth/access/'
      path: '/access'
      fullPath: '/access'
      preLoaderRoute: typeof AuthAccessIndexLazyRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute
  AuthAccessIndexLazyRoute: typeof AuthAccessIndexLazyRoute
  AuthPassportsIndexLazyRoute: typeof AuthPassportsIndexLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexLazyRoute: AuthIndexLazyRoute,
  AuthAccessIndexLazyRoute: AuthAccessIndexLazyRoute,
  AuthPassportsIndexLazyRoute: AuthPassportsIndexLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
